#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import gen.variant.ttypes

from thrift.transport import TTransport
all_structs = []


class Amount(object):
    """
    Attributes:
     - integral
     - fraction

    """


    def __init__(self, integral=0, fraction=0,):
        self.integral = integral
        self.fraction = fraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.integral = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fraction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Amount')
        if self.integral is not None:
            oprot.writeFieldBegin('integral', TType.I32, 1)
            oprot.writeI32(self.integral)
            oprot.writeFieldEnd()
        if self.fraction is not None:
            oprot.writeFieldBegin('fraction', TType.I64, 2)
            oprot.writeI64(self.fraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.integral is None:
            raise TProtocolException(message='Required field integral is unset!')
        if self.fraction is None:
            raise TProtocolException(message='Required field fraction is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CumulativeAmount(object):
    """
    Attributes:
     - integral
     - fraction

    """


    def __init__(self, integral=0, fraction=0,):
        self.integral = integral
        self.fraction = fraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.integral = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fraction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CumulativeAmount')
        if self.integral is not None:
            oprot.writeFieldBegin('integral', TType.I64, 1)
            oprot.writeI64(self.integral)
            oprot.writeFieldEnd()
        if self.fraction is not None:
            oprot.writeFieldBegin('fraction', TType.I64, 2)
            oprot.writeI64(self.fraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.integral is None:
            raise TProtocolException(message='Required field integral is unset!')
        if self.fraction is None:
            raise TProtocolException(message='Required field fraction is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContract(object):
    """
    Attributes:
     - address
     - deployer
     - sourceCode
     - byteCode
     - hashState

    """


    def __init__(self, address=None, deployer=None, sourceCode=None, byteCode=None, hashState=None,):
        self.address = address
        self.deployer = deployer
        self.sourceCode = sourceCode
        self.byteCode = byteCode
        self.hashState = hashState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deployer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sourceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.byteCode = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.hashState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContract')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.deployer is not None:
            oprot.writeFieldBegin('deployer', TType.STRING, 2)
            oprot.writeBinary(self.deployer)
            oprot.writeFieldEnd()
        if self.sourceCode is not None:
            oprot.writeFieldBegin('sourceCode', TType.STRING, 3)
            oprot.writeString(self.sourceCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceCode)
            oprot.writeFieldEnd()
        if self.byteCode is not None:
            oprot.writeFieldBegin('byteCode', TType.STRING, 4)
            oprot.writeBinary(self.byteCode)
            oprot.writeFieldEnd()
        if self.hashState is not None:
            oprot.writeFieldBegin('hashState', TType.STRING, 5)
            oprot.writeString(self.hashState.encode('utf-8') if sys.version_info[0] == 2 else self.hashState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.address is None:
            raise TProtocolException(message='Required field address is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractInvocation(object):
    """
    Attributes:
     - sourceCode
     - byteCode
     - hashState
     - method
     - params
     - forgetNewState

    """


    def __init__(self, sourceCode=None, byteCode=None, hashState=None, method=None, params=None, forgetNewState=None,):
        self.sourceCode = sourceCode
        self.byteCode = byteCode
        self.hashState = hashState
        self.method = method
        self.params = params
        self.forgetNewState = forgetNewState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.byteCode = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hashState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.params.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.forgetNewState = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractInvocation')
        if self.sourceCode is not None:
            oprot.writeFieldBegin('sourceCode', TType.STRING, 1)
            oprot.writeString(self.sourceCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceCode)
            oprot.writeFieldEnd()
        if self.byteCode is not None:
            oprot.writeFieldBegin('byteCode', TType.STRING, 2)
            oprot.writeBinary(self.byteCode)
            oprot.writeFieldEnd()
        if self.hashState is not None:
            oprot.writeFieldBegin('hashState', TType.STRING, 3)
            oprot.writeString(self.hashState.encode('utf-8') if sys.version_info[0] == 2 else self.hashState)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 4)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.params))
            for iter6 in self.params:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.forgetNewState is not None:
            oprot.writeFieldBegin('forgetNewState', TType.BOOL, 6)
            oprot.writeBool(self.forgetNewState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionId(object):
    """
    Attributes:
     - poolHash
     - index

    """


    def __init__(self, poolHash=None, index=None,):
        self.poolHash = poolHash
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.poolHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionId')
        if self.poolHash is not None:
            oprot.writeFieldBegin('poolHash', TType.STRING, 1)
            oprot.writeBinary(self.poolHash)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 2)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transaction(object):
    """
    Attributes:
     - id
     - source
     - target
     - amount
     - balance
     - currency
     - signature
     - smartContract
     - fee

    """


    def __init__(self, id=None, source=None, target=None, amount=None, balance=None, currency=None, signature=None, smartContract=None, fee=None,):
        self.id = id
        self.source = source
        self.target = target
        self.amount = amount
        self.balance = balance
        self.currency = currency
        self.signature = signature
        self.smartContract = smartContract
        self.fee = fee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.target = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.amount = Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.currency = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.signature = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.smartContract = SmartContractInvocation()
                    self.smartContract.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.fee = Amount()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 2)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.STRING, 3)
            oprot.writeBinary(self.target)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 4)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 5)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.BYTE, 6)
            oprot.writeByte(self.currency)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 7)
            oprot.writeBinary(self.signature)
            oprot.writeFieldEnd()
        if self.smartContract is not None:
            oprot.writeFieldBegin('smartContract', TType.STRUCT, 8)
            self.smartContract.write(oprot)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 9)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SealedTransaction(object):
    """
    Attributes:
     - id
     - trxn

    """


    def __init__(self, id=None, trxn=None,):
        self.id = id
        self.trxn = trxn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.id = TransactionId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.trxn = Transaction()
                    self.trxn.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SealedTransaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 1)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.trxn is not None:
            oprot.writeFieldBegin('trxn', TType.STRUCT, 2)
            self.trxn.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Pool(object):
    """
    Attributes:
     - hash
     - prevHash
     - time
     - transactionsCount
     - poolNumber

    """


    def __init__(self, hash=None, prevHash=None, time=None, transactionsCount=None, poolNumber=None,):
        self.hash = hash
        self.prevHash = prevHash
        self.time = time
        self.transactionsCount = transactionsCount
        self.poolNumber = poolNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prevHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.poolNumber = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Pool')
        if self.hash is not None:
            oprot.writeFieldBegin('hash', TType.STRING, 1)
            oprot.writeBinary(self.hash)
            oprot.writeFieldEnd()
        if self.prevHash is not None:
            oprot.writeFieldBegin('prevHash', TType.STRING, 2)
            oprot.writeBinary(self.prevHash)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 3)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 4)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.poolNumber is not None:
            oprot.writeFieldBegin('poolNumber', TType.I64, 5)
            oprot.writeI64(self.poolNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PeriodStats(object):
    """
    Attributes:
     - periodDuration
     - poolsCount
     - transactionsCount
     - balancePerCurrency
     - smartContractsCount
     - transactionsSmartCount

    """


    def __init__(self, periodDuration=None, poolsCount=None, transactionsCount=None, balancePerCurrency=None, smartContractsCount=None, transactionsSmartCount=None,):
        self.periodDuration = periodDuration
        self.poolsCount = poolsCount
        self.transactionsCount = transactionsCount
        self.balancePerCurrency = balancePerCurrency
        self.smartContractsCount = smartContractsCount
        self.transactionsSmartCount = transactionsSmartCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.periodDuration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.poolsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.balancePerCurrency = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = iprot.readByte()
                        _val13 = CumulativeAmount()
                        _val13.read(iprot)
                        self.balancePerCurrency[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.smartContractsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transactionsSmartCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PeriodStats')
        if self.periodDuration is not None:
            oprot.writeFieldBegin('periodDuration', TType.I64, 1)
            oprot.writeI64(self.periodDuration)
            oprot.writeFieldEnd()
        if self.poolsCount is not None:
            oprot.writeFieldBegin('poolsCount', TType.I32, 2)
            oprot.writeI32(self.poolsCount)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 3)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.balancePerCurrency is not None:
            oprot.writeFieldBegin('balancePerCurrency', TType.MAP, 4)
            oprot.writeMapBegin(TType.BYTE, TType.STRUCT, len(self.balancePerCurrency))
            for kiter14, viter15 in self.balancePerCurrency.items():
                oprot.writeByte(kiter14)
                viter15.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.smartContractsCount is not None:
            oprot.writeFieldBegin('smartContractsCount', TType.I32, 5)
            oprot.writeI32(self.smartContractsCount)
            oprot.writeFieldEnd()
        if self.transactionsSmartCount is not None:
            oprot.writeFieldBegin('transactionsSmartCount', TType.I32, 6)
            oprot.writeI32(self.transactionsSmartCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class APIResponse(object):
    """
    Attributes:
     - code
     - message

    """


    def __init__(self, code=None, message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('APIResponse')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 1)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BalanceGetResult(object):
    """
    Attributes:
     - status
     - amount

    """


    def __init__(self, status=None, amount=None,):
        self.status = status
        self.amount = amount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.amount = Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BalanceGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 2)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionGetResult(object):
    """
    Attributes:
     - status
     - found
     - transaction

    """


    def __init__(self, status=None, found=None, transaction=None,):
        self.status = status
        self.found = found
        self.transaction = transaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.found = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.transaction = SealedTransaction()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.found is not None:
            oprot.writeFieldBegin('found', TType.BOOL, 2)
            oprot.writeBool(self.found)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 3)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionsGetResult(object):
    """
    Attributes:
     - status
     - result
     - transactions

    """


    def __init__(self, status=None, result=None, transactions=None,):
        self.status = status
        self.result = result
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = SealedTransaction()
                        _elem21.read(iprot)
                        self.transactions.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter22 in self.transactions:
                iter22.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionFlowResult(object):
    """
    Attributes:
     - status
     - smart_contract_result

    """


    def __init__(self, status=None, smart_contract_result=None,):
        self.status = status
        self.smart_contract_result = smart_contract_result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.smart_contract_result = variant.ttypes.Variant()
                    self.smart_contract_result.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionFlowResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smart_contract_result is not None:
            oprot.writeFieldBegin('smart_contract_result', TType.STRUCT, 2)
            self.smart_contract_result.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolListGetResult(object):
    """
    Attributes:
     - status
     - result
     - pools

    """


    def __init__(self, status=None, result=None, pools=None,):
        self.status = status
        self.result = result
        self.pools = pools

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.pools = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = Pool()
                        _elem28.read(iprot)
                        self.pools.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.pools is not None:
            oprot.writeFieldBegin('pools', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.pools))
            for iter29 in self.pools:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolInfoGetResult(object):
    """
    Attributes:
     - status
     - isFound
     - pool

    """


    def __init__(self, status=None, isFound=None, pool=None,):
        self.status = status
        self.isFound = isFound
        self.pool = pool

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFound = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.pool = Pool()
                    self.pool.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolInfoGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.isFound is not None:
            oprot.writeFieldBegin('isFound', TType.BOOL, 2)
            oprot.writeBool(self.isFound)
            oprot.writeFieldEnd()
        if self.pool is not None:
            oprot.writeFieldBegin('pool', TType.STRUCT, 3)
            self.pool.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolTransactionsGetResult(object):
    """
    Attributes:
     - status
     - transactions

    """


    def __init__(self, status=None, transactions=None,):
        self.status = status
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = SealedTransaction()
                        _elem35.read(iprot)
                        self.transactions.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolTransactionsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter36 in self.transactions:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StatsGetResult(object):
    """
    Attributes:
     - status
     - stats

    """


    def __init__(self, status=None, stats=None,):
        self.status = status
        self.stats = stats

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.stats = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = PeriodStats()
                        _elem42.read(iprot)
                        self.stats.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StatsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.stats is not None:
            oprot.writeFieldBegin('stats', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.stats))
            for iter43 in self.stats:
                iter43.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractGetResult(object):
    """
    Attributes:
     - status
     - smartContract

    """


    def __init__(self, status=None, smartContract=None,):
        self.status = status
        self.smartContract = smartContract

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.smartContract = SmartContract()
                    self.smartContract.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smartContract is not None:
            oprot.writeFieldBegin('smartContract', TType.STRUCT, 2)
            self.smartContract.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractAddressesListGetResult(object):
    """
    Attributes:
     - status
     - addressesList

    """


    def __init__(self, status=None, addressesList=None,):
        self.status = status
        self.addressesList = addressesList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.addressesList = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = iprot.readBinary()
                        self.addressesList.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractAddressesListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.addressesList is not None:
            oprot.writeFieldBegin('addressesList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.addressesList))
            for iter50 in self.addressesList:
                oprot.writeBinary(iter50)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractsListGetResult(object):
    """
    Attributes:
     - status
     - smartContractsList

    """


    def __init__(self, status=None, smartContractsList=None,):
        self.status = status
        self.smartContractsList = smartContractsList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.smartContractsList = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = SmartContract()
                        _elem56.read(iprot)
                        self.smartContractsList.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractsListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smartContractsList is not None:
            oprot.writeFieldBegin('smartContractsList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.smartContractsList))
            for iter57 in self.smartContractsList:
                iter57.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartMethodParamsGetResult(object):
    """
    Attributes:
     - status
     - method
     - params

    """


    def __init__(self, status=None, method=None, params=None,):
        self.status = status
        self.method = method
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype61, _size58) = iprot.readListBegin()
                    for _i62 in range(_size58):
                        _elem63 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.params.append(_elem63)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartMethodParamsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 2)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.params))
            for iter64 in self.params:
                oprot.writeString(iter64.encode('utf-8') if sys.version_info[0] == 2 else iter64)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Amount)
Amount.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'integral', None, 0, ),  # 1
    (2, TType.I64, 'fraction', None, 0, ),  # 2
)
all_structs.append(CumulativeAmount)
CumulativeAmount.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'integral', None, 0, ),  # 1
    (2, TType.I64, 'fraction', None, 0, ),  # 2
)
all_structs.append(SmartContract)
SmartContract.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'deployer', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'sourceCode', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'byteCode', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'hashState', 'UTF8', None, ),  # 5
)
all_structs.append(SmartContractInvocation)
SmartContractInvocation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceCode', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'byteCode', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'hashState', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'method', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'params', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.BOOL, 'forgetNewState', None, None, ),  # 6
)
all_structs.append(TransactionId)
TransactionId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'poolHash', 'BINARY', None, ),  # 1
    (2, TType.I32, 'index', None, None, ),  # 2
)
all_structs.append(Transaction)
Transaction.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'source', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'target', 'BINARY', None, ),  # 3
    (4, TType.STRUCT, 'amount', [Amount, None], None, ),  # 4
    (5, TType.STRUCT, 'balance', [Amount, None], None, ),  # 5
    (6, TType.BYTE, 'currency', None, None, ),  # 6
    (7, TType.STRING, 'signature', 'BINARY', None, ),  # 7
    (8, TType.STRUCT, 'smartContract', [SmartContractInvocation, None], None, ),  # 8
    (9, TType.STRUCT, 'fee', [Amount, None], None, ),  # 9
)
all_structs.append(SealedTransaction)
SealedTransaction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'id', [TransactionId, None], None, ),  # 1
    (2, TType.STRUCT, 'trxn', [Transaction, None], None, ),  # 2
)
all_structs.append(Pool)
Pool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hash', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'prevHash', 'BINARY', None, ),  # 2
    (3, TType.I64, 'time', None, None, ),  # 3
    (4, TType.I32, 'transactionsCount', None, None, ),  # 4
    (5, TType.I64, 'poolNumber', None, None, ),  # 5
)
all_structs.append(PeriodStats)
PeriodStats.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'periodDuration', None, None, ),  # 1
    (2, TType.I32, 'poolsCount', None, None, ),  # 2
    (3, TType.I32, 'transactionsCount', None, None, ),  # 3
    (4, TType.MAP, 'balancePerCurrency', (TType.BYTE, None, TType.STRUCT, [CumulativeAmount, None], False), None, ),  # 4
    (5, TType.I32, 'smartContractsCount', None, None, ),  # 5
    (6, TType.I32, 'transactionsSmartCount', None, None, ),  # 6
)
all_structs.append(APIResponse)
APIResponse.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(BalanceGetResult)
BalanceGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'amount', [Amount, None], None, ),  # 2
)
all_structs.append(TransactionGetResult)
TransactionGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'found', None, None, ),  # 2
    (3, TType.STRUCT, 'transaction', [SealedTransaction, None], None, ),  # 3
)
all_structs.append(TransactionsGetResult)
TransactionsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.LIST, 'transactions', (TType.STRUCT, [SealedTransaction, None], False), None, ),  # 3
)
all_structs.append(TransactionFlowResult)
TransactionFlowResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'smart_contract_result', [gen.variant.ttypes.Variant, None], None, ),  # 2
)
all_structs.append(PoolListGetResult)
PoolListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.LIST, 'pools', (TType.STRUCT, [Pool, None], False), None, ),  # 3
)
all_structs.append(PoolInfoGetResult)
PoolInfoGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'isFound', None, None, ),  # 2
    (3, TType.STRUCT, 'pool', [Pool, None], None, ),  # 3
)
all_structs.append(PoolTransactionsGetResult)
PoolTransactionsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'transactions', (TType.STRUCT, [SealedTransaction, None], False), None, ),  # 2
)
all_structs.append(StatsGetResult)
StatsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'stats', (TType.STRUCT, [PeriodStats, None], False), None, ),  # 2
)
all_structs.append(SmartContractGetResult)
SmartContractGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'smartContract', [SmartContract, None], None, ),  # 2
)
all_structs.append(SmartContractAddressesListGetResult)
SmartContractAddressesListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'addressesList', (TType.STRING, 'BINARY', False), None, ),  # 2
)
all_structs.append(SmartContractsListGetResult)
SmartContractsListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'smartContractsList', (TType.STRUCT, [SmartContract, None], False), None, ),  # 2
)
all_structs.append(SmartMethodParamsGetResult)
SmartMethodParamsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRING, 'method', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'params', (TType.STRING, 'UTF8', False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
