#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from api import API
from api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  BalanceGetResult BalanceGet(Address address, Currency currency)')
    print('  TransactionGetResult TransactionGet(TransactionId transactionId)')
    print('  TransactionsGetResult TransactionsGet(Address address, i64 offset, i64 limit)')
    print('  TransactionFlowResult TransactionFlow(Transaction transaction)')
    print('  PoolHash GetLastHash()')
    print('  PoolListGetResult PoolListGetStable(PoolHash hash, i64 limit)')
    print('  PoolListGetResult PoolListGet(i64 offset, i64 limit)')
    print('  PoolInfoGetResult PoolInfoGet(PoolHash hash, i64 index)')
    print('  PoolTransactionsGetResult PoolTransactionsGet(PoolHash hash, i64 offset, i64 limit)')
    print('  StatsGetResult StatsGet()')
    print('  SmartContractGetResult SmartContractGet(Address address)')
    print('  SmartContractsListGetResult SmartContractsListGet(Address deployer)')
    print('  SmartContractAddressesListGetResult SmartContractAddressesListGet(Address deployer)')
    print('  PoolHash WaitForBlock(PoolHash obsolete)')
    print('  TransactionId WaitForSmartTransaction(Address smart_address)')
    print('  SmartContractsListGetResult SmartContractsAllListGet(i64 offset, i64 limit)')
    print('  SmartMethodParamsGetResult SmartMethodParamsGet(Address address, i64 id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = API.Client(protocol)
transport.open()

if cmd == 'BalanceGet':
    if len(args) != 2:
        print('BalanceGet requires 2 args')
        sys.exit(1)
    pp.pprint(client.BalanceGet(eval(args[0]), eval(args[1]),))

elif cmd == 'TransactionGet':
    if len(args) != 1:
        print('TransactionGet requires 1 args')
        sys.exit(1)
    pp.pprint(client.TransactionGet(eval(args[0]),))

elif cmd == 'TransactionsGet':
    if len(args) != 3:
        print('TransactionsGet requires 3 args')
        sys.exit(1)
    pp.pprint(client.TransactionsGet(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'TransactionFlow':
    if len(args) != 1:
        print('TransactionFlow requires 1 args')
        sys.exit(1)
    pp.pprint(client.TransactionFlow(eval(args[0]),))

elif cmd == 'GetLastHash':
    if len(args) != 0:
        print('GetLastHash requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetLastHash())

elif cmd == 'PoolListGetStable':
    if len(args) != 2:
        print('PoolListGetStable requires 2 args')
        sys.exit(1)
    pp.pprint(client.PoolListGetStable(eval(args[0]), eval(args[1]),))

elif cmd == 'PoolListGet':
    if len(args) != 2:
        print('PoolListGet requires 2 args')
        sys.exit(1)
    pp.pprint(client.PoolListGet(eval(args[0]), eval(args[1]),))

elif cmd == 'PoolInfoGet':
    if len(args) != 2:
        print('PoolInfoGet requires 2 args')
        sys.exit(1)
    pp.pprint(client.PoolInfoGet(eval(args[0]), eval(args[1]),))

elif cmd == 'PoolTransactionsGet':
    if len(args) != 3:
        print('PoolTransactionsGet requires 3 args')
        sys.exit(1)
    pp.pprint(client.PoolTransactionsGet(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'StatsGet':
    if len(args) != 0:
        print('StatsGet requires 0 args')
        sys.exit(1)
    pp.pprint(client.StatsGet())

elif cmd == 'SmartContractGet':
    if len(args) != 1:
        print('SmartContractGet requires 1 args')
        sys.exit(1)
    pp.pprint(client.SmartContractGet(eval(args[0]),))

elif cmd == 'SmartContractsListGet':
    if len(args) != 1:
        print('SmartContractsListGet requires 1 args')
        sys.exit(1)
    pp.pprint(client.SmartContractsListGet(eval(args[0]),))

elif cmd == 'SmartContractAddressesListGet':
    if len(args) != 1:
        print('SmartContractAddressesListGet requires 1 args')
        sys.exit(1)
    pp.pprint(client.SmartContractAddressesListGet(eval(args[0]),))

elif cmd == 'WaitForBlock':
    if len(args) != 1:
        print('WaitForBlock requires 1 args')
        sys.exit(1)
    pp.pprint(client.WaitForBlock(eval(args[0]),))

elif cmd == 'WaitForSmartTransaction':
    if len(args) != 1:
        print('WaitForSmartTransaction requires 1 args')
        sys.exit(1)
    pp.pprint(client.WaitForSmartTransaction(eval(args[0]),))

elif cmd == 'SmartContractsAllListGet':
    if len(args) != 2:
        print('SmartContractsAllListGet requires 2 args')
        sys.exit(1)
    pp.pprint(client.SmartContractsAllListGet(eval(args[0]), eval(args[1]),))

elif cmd == 'SmartMethodParamsGet':
    if len(args) != 2:
        print('SmartMethodParamsGet requires 2 args')
        sys.exit(1)
    pp.pprint(client.SmartMethodParamsGet(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
